RELATÓRIO

1. Termo de compromisso

Os membros do grupo afirmam que todo o código desenvolvido para este
trabalho é de autoria própria.  Exceto pelo material listado no item 3
deste relatório, os membros do grupo afirmam não ter copiado
material da Internet nem obtiveram código de terceiros.

2. Membros do grupo e alocação de esforço

(Preencha as linhas abaixo com o nome e o e-mail dos integrantes do
grupo.  Substitua XX pela contribuição de cada membro do grupo no
desenvolvimento do trabalho.) - Apagar Depois

Matheus Ferreira Coelho matheus.coelho789@gmail.com 50%
Celso Junio Simões de Oliveira Santos celso.juniodon@gmail.com 50%

3. Referências bibliográficas

1 - https://guialinux.uniriotec.br/ - Para recapitular alguns comandos do Linux.
2 - https://linux.die.net/man/2/fork - Fork
3 - https://linux.die.net/man/3/execvp - Execvp
4 - https://linux.die.net/man/3/explain_execvp - Execvp
5 - https://man7.org/linux/man-pages/man3/exec.3.html - Exec
6 - https://linux.die.net/man/2/close - Close
7 - https://man7.org/linux/man-pages/man2/close.2.html - Close
8 - https://man7.org/linux/man-pages/man2/open.2.html - Open
9 - https://linux.die.net/man/3/open - Open
10 - https://linux.die.net/man/2/dup2 - Dup2

4. Estruturas de dados

(Descreva e justifique as estruturas de dados e algoritmos utilizados
em sua solução.) - Apagar Depois

TAREFA/TASK 1: Resposta no Código conforme solitado. Resp:
O 1º if é necessário para a verificação do comand: Verifica se é um 'cd ', que é um comando para explorar diretórios; e se for, ele executa a linha seguinte e o segundo if.
    O 2º if é executado caso não seja fornecido um caminho/diretório após o cd ou o shell não foi capaz de encontra-lo, logo, uma mensagem de erro é diparada, indicando tal: "Diretório não encontrado". Assim, o 1º If é necessário para verificação, e o 2º é necessário para indicar erros.

TAREFA/TASK 2: Utilizamos um fork (na variável 'r') inicialmente, para fazer uma pequena prevenção de erros, e também para familiarizarmos com o uso da mesma, já que ela seria usada na TAREFA/TASK 4. Tal fork irá criar um processo "filho", derivado do processo "pai", no qual será guardado na variável 'r' um valor inteiro que será: 0 - no caso de sucesso (criando um processo filho), ou -1 - no caso de fracasso (simplificamos com 'r < 0') não criando um processo filho.
No caso do erro, printamos o "fork error", indicando tal; e no caso do sucesso, chamamos o execvp, que executará o comando chamado.


TAREFA/TASK 3: Fechamos o 'rcmd->fd' (sendo o fd o Nº do descritor de arquivo usado) atual com um "close" para que ele não se refira a nenhum arquivo e possa ser também reutilizado sem probloemas. Abrimos então o arquivo utilizando um open, apontando o arquivo para E/S, o modo e utilizando o código O_RDWR que é para primitir a leitura e escrita. 

TAREFA/TASK 4: Incialmente, chamamos o pipe(p) e o fork(r) e checamos seus valores, para garantir o sucesso de ambas operações. Se o resultado armazenado em qualquer uma das variáveis for < 0 (menor que zero, indicando algum erro ou falha no processo), realizamos a respectiva impressao de erro, e terminamos a chamada com um exit(1). Caso 'p' seja >= 0 e r = 0, chamamos o dup2, que faz um novo fd (file descriptor) a partir do antigo fd, se o antigo fd é válido e o novo não possui o mesmo valor do antigo. Após criar tal cópia com o dup2 na posição p[1], chamamos a execução do pipe a esquerda (processo filho). Por fim, caso não tenha caído em nenhum dos condicionais anteriores e p seja >= 0, chamamos o dup2, dessa vez para a posição p[0], fechamos os descritores p[0] e p[1], e executamos o pipe a direita, com um runcmd.
